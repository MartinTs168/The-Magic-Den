@model AllGamesQueryModel


@{
    ViewData["Title"] = "All Games";
}

<form method="get">
    <div class="row">
        
        <div class="mb-3 col-md-3 d-flex justify-content-between">
            <div class="mb-3">
                <label asp-for="SubCategory"></label>
                <select asp-for="SubCategory" class="form-control">
                    <option value="">All</option>
                    @foreach (var subCategory in Model.SubCategories)
                    {
                        <option value="@subCategory">@subCategory</option>
                    }
                </select>
            </div>
        </div>

        <div class="mb-3 col-md-3">
            <label asp-for="SearchTerm"></label>
            <input asp-for="SearchTerm" class="form-control" placeholder="...">
        </div>

        <div class="mb-3 col-md-3">
            <div class="mb-3">
                <label asp-for="Sort"></label>
                <select asp-for="Sort" class="form-control">
                    <option value="0">Newest</option>
                    <option value="1">Price descending</option>
                    <option value="2">Price ascending</option>
                </select>
            </div>
        </div>

        <div class="col-md-3">
            <div class="mb-3 mt-4 p-2">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </div>
        
        
    </div>
</form>

@{
    var previousPage = Model.CurrentPage - 1 > 0 ? Model.CurrentPage -1 : 1;
    var maxPage = Math.Ceiling((double)Model.TotalGamesCount / Model.GamesPerPage);
}

<div class="row mb-5">
    
    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-center">
        <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="Game"
           asp-action="All"
           asp-route-currentPage="@previousPage"
           asp-route-category="@Model.SubCategory"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sort)"><<</a>
    </div>

    @{
        var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
                                     !Model.Games.Any();
    }

    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
        <a class="btn btn-primary 
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="Game"
           asp-action="All"
           asp-route-currentPage="@(Model.CurrentPage + 1)"
           asp-route-category="@Model.SubCategory"
           asp-route-searchTerm="@Model.SearchTerm"
           asp-route-sorting="@((int)Model.Sort)">>></a>
    </div>
    
</div>

@if (!Model.Games.Any())
{
    <h2 class="text-center">No games found by the given criteria!</h2>
}
else
{
    <div class="d-flex flex-column gap-1 align-content-center card p-2">
        <div class="row d-flex mb-4 p-2 align-content-center">
            <div class="col-md-3">
                <h6 class="text-truncate mb-0">Game Name</h6>
            </div>

            <div class="col-md-1 mb-0">
                <h6>Discount</h6>
            </div>

            <div class="col-md-2 mb-0">
                <h6>Price</h6>
            </div>

            <div class="col-md-2 mb-0">
                <h6 class="text-truncate">Sub Category</h6>
            </div>

            <div class="col-md-2 mb-0">
                <h6 class="text-truncate">Brand</h6>
            </div>

            <div class="col-md-2 mb-0">
                
            </div>
        </div>
        @foreach (var game in Model.Games)
        {
            <div class="row d-flex">
                <partial name="_GamePartial" model="@game"/>
            </div>
        }
    </div>
}
@* TODO: Fix view to look better maybe make a different view for the admin to see the products better*@